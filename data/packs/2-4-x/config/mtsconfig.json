{
  "general": {
    "generateOverrideConfigs": {
      "value": false,
      "comment": "If true, then crafting and damage override config files, as well as language template files, will be dumped into the config folder at boot.  WARNING: this will overwrite your existing override config files!  Language files must be put into packs to function and will NOT overwrite anything."
    },
    "opSignEditingOnly": {
      "value": true,
      "comment": "If true, only OPs will be able to edit signs on servers.  Does not affect client worlds."
    },
    "opPickupVehiclesOnly": {
      "value": false,
      "comment": "If true, only OPs will be able to pick up vehicles with wrenches.  Does not affect client worlds."
    },
    "creativePickupVehiclesOnly": {
      "value": false,
      "comment": "If true, vehicles can only be picked up in creative mode."
    },
    "keyRequiredToStartVehicles": {
      "value": false,
      "comment": "If true, vehicles can only be started if the player has the key in their hand."
    },
    "noclipVehicles": {
      "value": false,
      "comment": "If true, vehicles will not be able to collide with blocks.  This also prevents them from moving if they do not have wheels on them, as otherwise they would phase through the ground into the void."
    },
    "chunkloadVehicles": {
      "value": true,
      "comment": "If true, vehicles will be chunkloaded when on roads/tracks.  This allows them to travel into unloaded chunks."
    },
    "doLegacyLightCompats": {
      "value": true,
      "comment": "If true, legacy compatibility code will be performed on all models to make their lights work with newer versions.  This code will significantly slow down boot times due to needing to parse all models on boot, however, packs may not have functional lights without it.  Choose wisely if you want speed or features."
    },
    "useHSV": {
      "value": false,
      "comment": "If enabled, the MTS dev mode will export color values as HSV instead of hex."
    },
    "allPlanesWithNav": {
      "value": false,
      "comment": "If true, all planes will have the ability to use beacons for navigation.  This is false to allow pack authors to define new/old planes that have this capability, but can be turned on if you don't care about realism."
    },
    "giveManualsOnJoin": {
      "value": true,
      "comment": "If true, then whenever a new player joins a world, they will be given a copy of the mod manuals."
    },
    "performModCompatFunctions": {
      "value": true,
      "comment": "If true, mod compatibility functions will be executed.  Should be true unless you're configuring a modpack and know and have addressed the various incompatibilities."
    },
    "forceRenderLastSolid": {
      "value": false,
      "comment": "If enabled, MTS will do rendering on the world-last Forge event.  This is not normally something you want, but can be used if some mods make things invisible.  Replaymod being one such example."
    },
    "devMode": {
      "value": false,
      "comment": "If enabled, MTS will allow access to the dev mode GUI while sitting in vehicles.  The GUI allows editing JSONs in-game without the need to restart."
    },
    "roadMaxLength": {
      "value": 32,
      "comment": "How long a single segment of road can be, in blocks.  While you can have longer segements, be aware they have more collision boxes and will generate more lag when broken or interacted with, and may not render if outside the chunk they are in.  Must be a whole number."
    },
    "aircraftSpeedFactor": {
      "value": 0.35,
      "comment": "Factor to apply to aircraft movement.  1 is the realistic value, but this makes vehicles move too fast for Minecraft. Adjust with caution."
    },
    "carSpeedFactor": {
      "value": 0.35,
      "comment": "Factor to apply to car movement.  1 is the realistic value, but this makes vehicles move too fast for Minecraft. Adjust with caution."
    },
    "fuelUsageFactor": {
      "value": 0.95,
      "comment": "Factor times which engines use fuel.  Change this if you think engines use fuel too fast or slow.  Setting it to 0 will disable fuel and allow engines to run without it."
    },
    "engineHoursFactor": {
      "value": 0.6,
      "comment": "Factor times which engines hours accumulate.  Change this if you want to adjust how fast engines wear out."
    },
    "climbSpeed": {
      "value": 0.125,
      "comment": "How far a vehicle will 'climb' blocks every tick when the wheels go into the ground.  Higher values make vehicles climb blocks quicker at the cost of smooth movement."
    },
    "gravityFactor": {
      "value": 1.05,
      "comment": "Factor for gravitational forces applied to vehicles.  Can be adjusted if you think cars are too 'floaty'.  Does not affect aircraft."
    },
    "maxFlightHeight": {
      "value": 0.0,
      "comment": "How high planes can fly.  Setting this to 0 (default) will allow planes to fly as high as their natural physics allows.  Useful if you want to cap vertical height for some reason."
    },
    "engineSpeedTempFactor": {
      "value": 0.9,
      "comment": "Factor for how RPM affects engine temp.  Higher values will make engines heat up quicker at higher RPMs."
    },
    "engineBiomeTempFactor": {
      "value": 1.0,
      "comment": "Factor for how biome temp affects engine temp.  Higher values will make engines heat up quicker in hotter biomes."
    },
    "rfToElectricityFactor": {
      "value": 0.02,
      "comment": "Factor for converting RF to internal electicity for vehicles.  Default value is 1/100, but can be adjusted."
    },
    "vehicleDeathDespawnTime": {
      "value": 0.0,
      "comment": "Time (in seconds) between when vehicles reach 0 health and they de-spawn.  Normally 0, which means they never de-spawn."
    },
    "seaLevel": {
      "value": 63,
      "comment": "The Y-Level that will be used to base altitude off of. Will also be factored in for engine performance calculations. Change only if you know what you're doing/ why this matters to engines/flying."
    },
    "defaultVehicleRepairMaterials": {
      "value": [],
      "comment": "List of items that can be used to repair vehicles by default, if no repair recipe is set in the vehicle's JSON."
    },
    "defaultPartRepairMaterials": {
      "value": [],
      "comment": "List of items that can be used to repair part by default, if no repair recipe is set in the part's JSON."
    },
    "engineDimensionBlacklist": {
      "value": [],
      "comment": "Blacklist of dimension names where engines will be prevented from being started.  Can be used to disable vehicles in specific dimensions.  Think Galacticraft, where you don't want folks flying planes on the moon."
    },
    "engineDimensionWhitelist": {
      "value": [],
      "comment": "Whitelist of dimension names where engines will only be alowed to work.  Overrides the blacklist if this exists."
    },
    "packVehicleScales": {
      "value": {
        "mts": 1.0,
        "svmp": 1.0,
        "craftspeedwheels": 1.0,
        "ccynho": 1.0,
        "craftspeedplates": 1.0,
        "craftspeedparts": 1.0,
        "panzerkrieg": 1.0,
        "vehiclesofsurvival": 1.0,
        "craftspeedengines": 1.0,
        "craftspeed": 1.0,
        "mtsofficialpack": 1.0,
        "unudecor": 1.0,
        "unupartsexpanded": 1.0,
        "unuparts": 1.0,
        "unucivil": 1.0,
        "unucustom": 1.0,
        "unumilitary": 1.0,
        "unupmc": 1.0,
        "unuverse": 1.0,
        "unucowley": 1.0,
        "unufuchu": 1.0,
        "unucsa": 1.0,
        "gvp": 1.0,
        "iavm": 1.0,
        "iav": 1.0
      },
      "comment": "Scale of all vehicles for this pack.  You probably won't want to change this, but if you do want the vehicles to be smaller for some reason, you can."
    },
    "packSpeedFactors": {
      "value": {
        "mts": 1.0,
        "svmp": 1.0,
        "craftspeedwheels": 1.0,
        "ccynho": 1.0,
        "craftspeedplates": 1.0,
        "craftspeedparts": 1.0,
        "panzerkrieg": 1.0,
        "vehiclesofsurvival": 1.0,
        "craftspeedengines": 1.0,
        "craftspeed": 1.0,
        "mtsofficialpack": 1.0,
        "unudecor": 1.0,
        "unupartsexpanded": 1.0,
        "unuparts": 1.0,
        "unucivil": 1.0,
        "unucustom": 1.0,
        "unumilitary": 1.0,
        "unupmc": 1.0,
        "unuverse": 1.0,
        "unucowley": 1.0,
        "unufuchu": 1.0,
        "unucsa": 1.0,
        "gvp": 1.0,
        "iavm": 1.0,
        "iav": 1.0
      },
      "comment": "A mapping of pack-speciifc speed factors.  These values will only apply to the vehicles in the pack modified.  This allows for speeding up packs with slower vehicles, or slowing down packs with fast vehicles for a more even play experience.  Note that this applies on top of the global speed factor.  So if that is set to 0.30, and a pack is set to 0.5, then the total speed factor will be 0.15"
    },
    "itemWeights": {
      "comment1": "The following section is used for calculating item weights.  Any item that contains the text bits will have its weight multiplied by the following factor.",
      "comment2": "This mass factors into vehicle performance, with particular emphasis on vehicle payloads.  Some defaults are presented here, but you can add/remove to your liking.",
      "comment3": "Note that the part of the name searched is the item's registry name, NOT the in-game display name.  This is similar to what is in the /give command.",
      "weights": {
        "gold": 4.0,
        "diamond": 4.0,
        "ore": 2.5,
        "iron": 4.0,
        "coal": 2.0,
        "stone": 1.5
      }
    },
    "joinedPlayers": {
      "value": [
        "530fa97a-357f-3c19-94d3-0c5c65c18fe8",
        "3aa6d498-47a2-3bbf-b27a-922e17e81eb3"
      ],
      "comment": "Listing of players that have joined this world.  Players will be given the manual on their first join."
    }
  },
  "damage": {
    "bulletBlockBreaking": {
      "value": true,
      "comment": "Whether or not bullets/bombs can break blocks when they hit them.  This will also disable explosive block breakage (though not explosions themselves) and prevent incendiary bullets from setting blocks on fire."
    },
    "bulletExplosions": {
      "value": true,
      "comment": "Whether or not bullets/bombs will blow up.  This does not disable block breakage, but it will pretty much nerf all block mass-destruction weapons."
    },
    "vehicleBlockBreaking": {
      "value": true,
      "comment": "Whether or not vehicles can break blocks when they run into them or blow up.  If false, vehicles will simply stop when they hit blocks."
    },
    "vehicleDestruction": {
      "value": true,
      "comment": "Whether or not vehicles can be destroyed by ramming into blocks at high speeds.  Set this to false if you don't like loosing vehicles to badly-placed walls."
    },
    "vehicleExplosions": {
      "value": true,
      "comment": "Whether or not vehicles explode when crashed or shot down.  If this is false, vehicles will simply poof when they crash."
    },
    "creativePlayerDamage": {
      "value": false,
      "comment": "If true, damage from vehicles and guns will be applied to creative players.  Not sure why you'd want this, but it's here."
    },
    "wheelBreakage": {
      "value": true,
      "comment": "Whether or not wheels can be broken (go flat)."
    },
    "wheelDamageIgnoreVelocity": {
      "value": false,
      "comment": "Whether or not velocity is ignored when calculating wheel damage."
    },
    "allowExternalDamage": {
      "value": false,
      "comment": "Whether or not non-IV things can damage vehicles.  This is normally false, as external damage is a hassle for most people, but can be true if you want other mod's guns to be able to attack vehicles in addition to IV's."
    },
    "propellerDamageFactor": {
      "value": 1.0,
      "comment": "Factor for damage caused by a propeller."
    },
    "jetDamageFactor": {
      "value": 1.0,
      "comment": "Factor for damage caused by a jet engine."
    },
    "wheelDamageFactor": {
      "value": 1.0,
      "comment": "Factor for damage caused by wheels on vehicles."
    },
    "crashDamageFactor": {
      "value": 1.0,
      "comment": "Factor for damage caused by crashes."
    },
    "bulletDamageFactor": {
      "value": 1.0,
      "comment": "Factor for damage caused by bullets on vehicles."
    },
    "wheelDamageMinimumVelocity": {
      "value": 0.2,
      "comment": "Minimum velocity (blocks/second) which vehicles must be going to damage entities with their wheels."
    },
    "packBulletDamageFactors": {
      "value": {
        "mts": 1.0,
        "svmp": 1.0,
        "craftspeedwheels": 1.0,
        "ccynho": 1.0,
        "craftspeedplates": 1.0,
        "craftspeedparts": 1.0,
        "panzerkrieg": 1.0,
        "vehiclesofsurvival": 1.0,
        "craftspeedengines": 1.0,
        "craftspeed": 1.0,
        "mtsofficialpack": 1.0,
        "unudecor": 1.0,
        "unupartsexpanded": 1.0,
        "unuparts": 1.0,
        "unucivil": 1.0,
        "unucustom": 1.0,
        "unumilitary": 1.0,
        "unupmc": 1.0,
        "unuverse": 1.0,
        "unucowley": 1.0,
        "unufuchu": 1.0,
        "unucsa": 1.0,
        "gvp": 1.0,
        "iavm": 1.0,
        "iav": 1.0
      },
      "comment": "A mapping of pack-speciifc bullet damage factors.  These values will apply to all bullets in a pack when they hit something, be it a vehicle or entity."
    }
  },
  "fuel": {
    "comment1": "The following section is used for fuel configs for engines.  Each entry here is a single fuel type for engines.",
    "comment2": "Inside each entry exist values for the potency of the fluids that can be considered to be that fuel type.",
    "comment3": "You can make engines take different types of fluids for their fuels by editing these values.  See the in-game handbook for more information.",
    "comment4": "If you are having troubles getting the name for a particular fluid, run the game with the mods you want and check the 'lastLoadedFluids' list.  This contains all the fluids that were present during the last run of the game.",
    "comment5": "The first entry in the list is the registered fluid name, while the second entry will be the displayed name.  Only use the first name, as the second name changes based on game language settings.",
    "fuels": {
      "furnace": {
        "lava": 1.0
      },
      "brewing_stand": {
        "lava": 1.0
      },
      "diesel": {
        "creosote": 0.7,
        "diesel": 1.0,
        "oil": 0.5,
        "biodiesel": 0.8
      },
      "electricity": {
        "lava": 1.0
      },
      "gasoline": {
        "gasoline": 1.0,
        "ethanol": 0.85
      },
      "avgas": {
        "lava": 1.0,
        "gasoline": 1.0
      },
      "Diesel": {
        "creosote": 0.7,
        "diesel": 1.0,
        "oil": 0.5,
        "biodiesel": 0.8
      }
    },
    "lastLoadedFluids": {
      "seed_oil": "fluid.createaddition.seed_oil",
      "molten_copper": "fluid.tconstruct.molten_copper",
      "molten_hematite": "fluid_type.tinkers_things.molten_hematite",
      "flowing_molten_signalum": "fluid.tconstruct.molten_signalum",
      "flowing_hydrofluoric_acid": "block.mekanism.hydrofluoric_acid",
      "brine": "block.mekanism.brine",
      "magma": "fluid.tconstruct.magma",
      "seared_stone": "fluid.tconstruct.seared_stone",
      "flowing_molten_steel": "fluid.tconstruct.molten_steel",
      "flowing_molten_pig_iron": "fluid.tconstruct.molten_pig_iron",
      "tea": "fluid.create.tea",
      "flowing_molten_emerald": "fluid.tconstruct.molten_emerald",
      "flowing_brine": "block.mekanism.brine",
      "flowing_molten_uranium": "fluid.tconstruct.molten_uranium",
      "fake_lava": "Lava",
      "flowing_nutritional_paste": "block.mekanism.nutritional_paste",
      "flowing_molten_copper": "fluid.tconstruct.molten_copper",
      "milk": "Milk",
      "earth_slime": "fluid.tconstruct.earth_slime",
      "flowing_molten_bronze": "fluid.tconstruct.molten_bronze",
      "liquid_soul": "fluid.tconstruct.liquid_soul",
      "flowing_tea": "fluid.create.tea",
      "crude_oil": "fluid.createdieselgenerators.crude_oil",
      "flowing_magma": "fluid.tconstruct.magma",
      "flowing_lava": "Lava",
      "superheated_sodium": "block.mekanism.superheated_sodium",
      "molten_ender": "fluid.tconstruct.molten_ender",
      "molten_signalum": "fluid.tconstruct.molten_signalum",
      "flowing_seed_oil": "fluid.createaddition.seed_oil",
      "flowing_ethene": "block.mekanism.ethene",
      "rabbit_stew": "fluid.tconstruct.rabbit_stew",
      "flowing_molten_ender": "fluid.tconstruct.molten_ender",
      "flowing_liquid_soul": "fluid.tconstruct.liquid_soul",
      "molten_slimesteel": "fluid.tconstruct.molten_slimesteel",
      "flowing_earth_slime": "fluid.tconstruct.earth_slime",
      "flowing_fake_water": "Water",
      "flowing_molten_tungsten": "fluid.tconstruct.molten_tungsten",
      "flowing_plant_oil": "fluid.createdieselgenerators.plant_oil",
      "ethene": "block.mekanism.ethene",
      "beetroot_soup": "fluid.tconstruct.beetroot_soup",
      "molten_platinum": "fluid.tconstruct.molten_platinum",
      "molten_hematite_flowing": "fluid_type.tinkers_things.molten_hematite",
      "fake_water": "Water",
      "molten_gold": "fluid.tconstruct.molten_gold",
      "molten_nickel": "fluid.tconstruct.molten_nickel",
      "bioethanol": "fluid.createaddition.bioethanol",
      "molten_clay": "fluid.tconstruct.molten_clay",
      "flowing_superheated_sodium": "block.mekanism.superheated_sodium",
      "flowing_molten_queens_slime": "fluid.tconstruct.molten_queens_slime",
      "molten_steel": "fluid.tconstruct.molten_steel",
      "flowing_molten_nickel": "fluid.tconstruct.molten_nickel",
      "blood": "block.biomesoplenty.blood",
      "molten_pig_iron": "fluid.tconstruct.molten_pig_iron",
      "flowing_molten_glass": "fluid.tconstruct.molten_glass",
      "meat_soup": "fluid.tconstruct.meat_soup",
      "flowing_blood": "block.biomesoplenty.blood",
      "molten_refined_glowstone": "fluid.tconstruct.molten_refined_glowstone",
      "flowing_seared_stone": "fluid.tconstruct.seared_stone",
      "flowing_chocolate": "fluid.create.chocolate",
      "hydrogen_chloride": "block.mekanism.hydrogen_chloride",
      "flowing_molten_cobalt": "fluid.tconstruct.molten_cobalt",
      "flowing_oxygen": "block.mekanism.oxygen",
      "molten_uranium": "fluid.tconstruct.molten_uranium",
      "flowing_molten_nethersteel": "fluid.createbigcannons.flowing_molten_nethersteel",
      "flowing_mushroom_stew": "fluid.tconstruct.mushroom_stew",
      "empty": "Air",
      "lithium": "block.mekanism.lithium",
      "flowing_lithium": "block.mekanism.lithium",
      "flowing_molten_lumium": "fluid.tconstruct.molten_lumium",
      "molten_amethyst_bronze": "fluid.tconstruct.molten_amethyst_bronze",
      "flowing_molten_lead": "fluid.tconstruct.molten_lead",
      "molten_lumium": "fluid.tconstruct.molten_lumium",
      "flowing_fake_lava": "Lava",
      "flowing_biodiesel": "fluid.createdieselgenerators.biodiesel",
      "molten_iron": "fluid.tconstruct.molten_iron",
      "molten_cobalt": "fluid.tconstruct.molten_cobalt",
      "flowing_molten_debris": "fluid.tconstruct.molten_debris",
      "flowing_gasoline": "fluid.createdieselgenerators.gasoline",
      "molten_amethyst": "fluid.tconstruct.molten_amethyst",
      "molten_hepatizon": "fluid.tconstruct.molten_hepatizon",
      "fusion_fuel": "block.mekanismgenerators.fusion_fuel",
      "sodium": "block.mekanism.sodium",
      "molten_osmium": "fluid.tconstruct.molten_osmium",
      "flowing_hydrogen_chloride": "block.mekanism.hydrogen_chloride",
      "flowing_molten_obsidian": "fluid.tconstruct.molten_obsidian",
      "flowing_molten_zinc": "fluid.tconstruct.molten_zinc",
      "sulfuric_acid": "block.mekanism.sulfuric_acid",
      "mushroom_stew": "fluid.tconstruct.mushroom_stew",
      "flowing_molten_amethyst": "fluid.tconstruct.molten_amethyst",
      "flowing_molten_amethyst_bronze": "fluid.tconstruct.molten_amethyst_bronze",
      "flowing_honey": "fluid.tconstruct.honey",
      "flowing_heavy_water": "block.mekanism.heavy_water",
      "powdered_snow": "fluid.tconstruct.powdered_snow",
      "flowing_molten_porcelain": "fluid.tconstruct.molten_porcelain",
      "molten_refined_obsidian": "fluid.tconstruct.molten_refined_obsidian",
      "flowing_fusion_fuel": "block.mekanismgenerators.fusion_fuel",
      "gasoline": "fluid.createdieselgenerators.gasoline",
      "flowing_crude_oil": "fluid.createdieselgenerators.crude_oil",
      "flowing_chlorine": "block.mekanism.chlorine",
      "flowing_molten_invar": "fluid.tconstruct.molten_invar",
      "lava": "Lava",
      "molten_tungsten": "fluid.tconstruct.molten_tungsten",
      "honey": "fluid.tconstruct.honey",
      "heavy_water": "block.mekanism.heavy_water",
      "flowing_molten_brass": "fluid.tconstruct.molten_brass",
      "potion": "Uncraftable Potion",
      "flowing_molten_hepatizon": "fluid.tconstruct.molten_hepatizon",
      "molten_emerald": "fluid.tconstruct.molten_emerald",
      "chlorine": "block.mekanism.chlorine",
      "molten_porcelain": "fluid.tconstruct.molten_porcelain",
      "molten_bronze": "fluid.tconstruct.molten_bronze",
      "flowing_venom": "fluid.tconstruct.venom",
      "flowing_molten_iron": "fluid.tconstruct.molten_iron",
      "molten_pewter": "fluid.tconstruct.molten_pewter",
      "molten_cast_iron": "fluid.createbigcannons.molten_cast_iron",
      "molten_electrum": "fluid.tconstruct.molten_electrum",
      "flowing_tritium": "block.mekanismgenerators.tritium",
      "flowing_meat_soup": "fluid.tconstruct.meat_soup",
      "molten_silver": "fluid.tconstruct.molten_silver",
      "hydrogen": "block.mekanism.hydrogen",
      "flowing_hydrogen": "block.mekanism.hydrogen",
      "molten_zinc": "fluid.tconstruct.molten_zinc",
      "molten_nethersteel": "fluid.createbigcannons.molten_nethersteel",
      "uranium_hexafluoride": "block.mekanism.uranium_hexafluoride",
      "venom": "fluid.tconstruct.venom",
      "ender_slime": "fluid.tconstruct.ender_slime",
      "flowing_molten_diamond": "fluid.tconstruct.molten_diamond",
      "flowing_molten_cast_iron": "fluid.createbigcannons.flowing_molten_cast_iron",
      "flowing_molten_soulsteel": "fluid.tconstruct.molten_soulsteel",
      "flowing_ethanol": "fluid.createdieselgenerators.ethanol",
      "biodiesel": "fluid.createdieselgenerators.biodiesel",
      "nutritional_paste": "block.mekanism.nutritional_paste",
      "tritium": "block.mekanismgenerators.tritium",
      "flowing_molten_pewter": "fluid.tconstruct.molten_pewter",
      "flowing_molten_tin": "fluid.tconstruct.molten_tin",
      "flowing_bioethanol": "fluid.createaddition.bioethanol",
      "hydrofluoric_acid": "block.mekanism.hydrofluoric_acid",
      "flowing_molten_refined_glowstone": "fluid.tconstruct.molten_refined_glowstone",
      "flowing_molten_manyullyn": "fluid.tconstruct.molten_manyullyn",
      "molten_aluminum": "fluid.tconstruct.molten_aluminum",
      "flowing_molten_aluminum": "fluid.tconstruct.molten_aluminum",
      "flowing_molten_silver": "fluid.tconstruct.molten_silver",
      "chocolate": "fluid.create.chocolate",
      "diesel": "fluid.createdieselgenerators.diesel",
      "molten_debris": "fluid.tconstruct.molten_debris",
      "ethanol": "fluid.createdieselgenerators.ethanol",
      "flowing_molten_netherite": "fluid.tconstruct.molten_netherite",
      "molten_netherite": "fluid.tconstruct.molten_netherite",
      "blazing_blood": "fluid.tconstruct.blazing_blood",
      "flowing_molten_slimesteel": "fluid.tconstruct.molten_slimesteel",
      "scorched_stone": "fluid.tconstruct.scorched_stone",
      "molten_manyullyn": "fluid.tconstruct.molten_manyullyn",
      "molten_enderium": "fluid.tconstruct.molten_enderium",
      "molten_lead": "fluid.tconstruct.molten_lead",
      "flowing_molten_clay": "fluid.tconstruct.molten_clay",
      "flowing_molten_gold": "fluid.tconstruct.molten_gold",
      "flowing_sulfuric_acid": "block.mekanism.sulfuric_acid",
      "flowing_blazing_blood": "fluid.tconstruct.blazing_blood",
      "flowing_molten_quartz": "fluid.tconstruct.molten_quartz",
      "flowing_molten_osmium": "fluid.tconstruct.molten_osmium",
      "molten_soulsteel": "fluid.tconstruct.molten_soulsteel",
      "sulfur_trioxide": "block.mekanism.sulfur_trioxide",
      "flowing_molten_electrum": "fluid.tconstruct.molten_electrum",
      "sky_slime": "fluid.tconstruct.sky_slime",
      "uranium_oxide": "block.mekanism.uranium_oxide",
      "molten_diamond": "fluid.tconstruct.molten_diamond",
      "molten_brass": "fluid.tconstruct.molten_brass",
      "flowing_sky_slime": "fluid.tconstruct.sky_slime",
      "plant_oil": "fluid.createdieselgenerators.plant_oil",
      "deuterium": "block.mekanismgenerators.deuterium",
      "flowing_molten_refined_obsidian": "fluid.tconstruct.molten_refined_obsidian",
      "molten_glass": "fluid.tconstruct.molten_glass",
      "flowing_sulfur_dioxide": "block.mekanism.sulfur_dioxide",
      "oxygen": "block.mekanism.oxygen",
      "flowing_ender_slime": "fluid.tconstruct.ender_slime",
      "flowing_diesel": "fluid.createdieselgenerators.diesel",
      "flowing_scorched_stone": "fluid.tconstruct.scorched_stone",
      "molten_knightslime": "fluid.tconstruct.molten_knightslime",
      "water": "Water",
      "flowing_uranium_oxide": "block.mekanism.uranium_oxide",
      "molten_quartz": "fluid.tconstruct.molten_quartz",
      "flowing_water": "Water",
      "flowing_uranium_hexafluoride": "block.mekanism.uranium_hexafluoride",
      "flowing_rabbit_stew": "fluid.tconstruct.rabbit_stew",
      "molten_queens_slime": "fluid.tconstruct.molten_queens_slime",
      "flowing_potion": "Uncraftable Potion",
      "flowing_molten_platinum": "fluid.tconstruct.molten_platinum",
      "flowing_deuterium": "block.mekanismgenerators.deuterium",
      "molten_obsidian": "fluid.tconstruct.molten_obsidian",
      "flowing_molten_rose_gold": "fluid.tconstruct.molten_rose_gold",
      "flowing_steam": "block.mekanism.steam",
      "molten_invar": "fluid.tconstruct.molten_invar",
      "steam": "block.mekanism.steam",
      "flowing_beetroot_soup": "fluid.tconstruct.beetroot_soup",
      "flowing_sulfur_trioxide": "block.mekanism.sulfur_trioxide",
      "flowing_milk": "Milk",
      "flowing_molten_enderium": "fluid.tconstruct.molten_enderium",
      "sulfur_dioxide": "block.mekanism.sulfur_dioxide",
      "molten_rose_gold": "fluid.tconstruct.molten_rose_gold",
      "flowing_sodium": "block.mekanism.sodium",
      "flowing_molten_knightslime": "fluid.tconstruct.molten_knightslime",
      "molten_constantan": "fluid.tconstruct.molten_constantan",
      "molten_tin": "fluid.tconstruct.molten_tin",
      "flowing_molten_constantan": "fluid.tconstruct.molten_constantan"
    }
  }
}